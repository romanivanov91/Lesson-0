Урок 0. Базовые знания

Вопросы для тестирования:
1 Git
1 Для чего используется Git?
2 Что такое ветка? Что такое коммит?
3 Что делает команда fetch, push, pull? Что такое merge request?
4 При каких условиях возникает конфликт между ветками?
2 Какие программируемые объекты БД Вы знаете?
3 Создание таблиц
   1. Что такое identity поле?
   2. Что такое первичные и внешние ключи? Чем они отличаются и для чего применяются
   3. Что такое ограничения? Какие бывают? Для чего используется каждое из них?
   4. Модификация структуры таблиц (добавление/удаление столбцов) в существующих таблицах
4 Функции
   1. Какие виды функций бывают? В чем их отличие?
   2. Привести несколько примеров системных функций и рассказать как и зачем их использовать?
5 Процедуры
1 Что такое процедуры? В чем их отличие от функций?
2 Что будет если вызвать процедуру, в которой выполняется обычный select?
6 Триггеры
   1. Что такое триггеры? В чем их отличие от процедур?
   2. Какие виды триггеров бывают и при каких событиях они запускаются?
Практические задания:
1 Git
1 Создать репозиторий на GitHub
2 Каждый последующий пункт должен располагаться в отдельной ветке (в ветках не должно быть кода, который не относится к пункту)
2 Создать таблицы (на выходе: файл в репозитории CreateStructure.sql в ветке Tables)
◦ dbo.SKU (ID identity, Code, Name)
▪ Ограничение на уникальность поля Code
▪ Значение по умолчанию для поля Code: "s" + ID
◦ dbo.Basket (ID identity, ID_SKU (внешний ключ на таблицу dbo.SKU), Quantity, Value, PurchaseDate, DiscountValue)
▪ Ограничение, что поле Quantity и Value не могут быть меньше 0
▪ Добавить значение по умолчанию для поля PurchaseDate: дата добавления записи (текущая дата)
◦ dbo.Family (ID identity, FamilySurName, BudgetValue)
3 Создать функцию (на выходе: файл в репозитории dbo.udf_GetSKUPrice.sql в ветке Functions)
◦ Входной параметр @ID_SKU
◦ Рассчитывает стоимость передаваемого продукта из таблицы dbo.Basket по формуле
▪ Value по переданному SKU / Quantity по переданному SKU
◦ На выходе значение типа decimal(18, 2)
4 Создать представление (на выходе: файл в репозитории dbo.vw_SKUPriceв ветке VIEWs)
◦ Возвращает все атрибуты продуктов из таблицы dbo.SKU и расчетный атрибут со стоимостью одного продукта (используя функцию dbo.udf_GetSKUPrice)
5 Создать процедуру (на выходе: файл в репозитории dbo.usp_MakeFamilyPurchase в ветке Procedures)
◦ Входной параметр (@FamilySurName varchar(255)) одно из значений аттрибута SurName таблицы dbo.Family
◦ Процедура при вызове обновляет данные в таблицы dbo.Family в поле BudgetValue по логике
      1. dbo.Family.BudgetValue - sum(dbo.Basket.Value)
      2. При передаче несуществующего dbo.Family.SurName пользователю выдается ошибка, что такой семьи нет
6 Создать триггер (на выходе: файл в репозитории dbo.TR_Basket_insert_update в ветке Triggers)
   1. Если в таблицу dbo.Basket за раз добавляются 2 и более записей одного ID_SKU, то значение в поле DiscountValue = Value * 5%, иначе DiscountValue = 0
Полезная информация:
1 Материалы для самоподготовки: Microsoft SQL Server 2012. Основы T-SQL / Ицик Бен Ган (https://obuchalka.org/20200329119682/microsoft-sql-server-2012-osnovi-t-sql-ben-gan-i-raitman-m-a-2015.html)
◦ Глава 1. Общие сведения о создании запросов и программировании на языке T-SQL
◦ Глава 2. Запросы
к одиночным таблицам

◦
Глава 3. Соединения

◦
Глава 8. Изменение данных

◦
Глава 10. Программируемые объекты
